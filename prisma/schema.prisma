// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HealthFacility {
  hf_id                  Int             @id @default(autoincrement())
  name                   String
  address                String
  phone_number           String
  email                  String
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  bloodDonations         BloodDonation[]
  bloodStocks            BloodStock[]
  bloodUsages            BloodUsage[]
  bloodRequestsRequested BloodRequest[]  @relation("RequesterFacility")
  bloodRequestsResponded BloodRequest[]  @relation("ResponderFacility")

  @@map("health_facilities")
}

model BloodRequest {
  request_id         Int       @id @default(autoincrement())
  requester_hf_id    Int
  responder_hf_id    Int
  responder_donor_id Int
  quantity           Int
  status             String    @default("pending")
  purpose            String
  request_date       DateTime
  confirmed_date     DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  requesterFacility HealthFacility @relation("RequesterFacility", fields: [requester_hf_id], references: [hf_id])
  responderFacility HealthFacility @relation("ResponderFacility", fields: [responder_hf_id], references: [hf_id])
  responderDonor    Donor          @relation("ResponderDonor", fields: [responder_donor_id], references: [donor_id])

  @@map("blood_requests")
}

model Donor {
  donor_id       Int             @id @default(autoincrement())
  name           String
  gender         String          @default("L")
  blood_type     String          @default("A")
  rhesus_type    String          @default("positif")
  date_of_birth  DateTime
  address        String
  phone_number   String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  bloodDonations BloodDonation[]
  bloodUsages    BloodUsage[]
  bloodRequests  BloodRequest[]  @relation("ResponderDonor")

  @@map("donors")
}

model BloodDonation {
  donation_id Int      @id @default(autoincrement())
  hf_id       Int
  donor_id    Int
  donor_date  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  healthFacility HealthFacility @relation(fields: [hf_id], references: [hf_id])
  donor          Donor          @relation(fields: [donor_id], references: [donor_id])
  bloodStocks    BloodStock[]

  @@map("blood_donations")
}

model BloodStock {
  stock_id    Int      @id @default(autoincrement())
  donation_id Int
  hf_id       Int
  entry_date  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  donation       BloodDonation  @relation(fields: [donation_id], references: [donation_id])
  healthFacility HealthFacility @relation(fields: [hf_id], references: [hf_id])
  bloodUsages    BloodUsage[]

  @@map("blood_stocks")
}

model BloodUsage {
  usage_id           Int      @id @default(autoincrement())
  requester_donor_id Int
  stock_id           Int
  hf_id              Int
  purpose            String
  date               DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  donor          Donor          @relation(fields: [requester_donor_id], references: [donor_id])
  stock          BloodStock     @relation(fields: [stock_id], references: [stock_id])
  healthFacility HealthFacility @relation(fields: [hf_id], references: [hf_id])

  @@map("blood_usages")
}
